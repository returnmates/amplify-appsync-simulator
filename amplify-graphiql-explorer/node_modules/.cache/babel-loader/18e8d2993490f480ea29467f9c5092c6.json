{"ast":null,"code":"import _toConsumableArray from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Button,Form,Modal,Dropdown,Input,TextArea,Label}from'semantic-ui-react';import{generateToken,parse}from'./utils/jwt';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var AUTH_MODE;(function(AUTH_MODE){AUTH_MODE[\"API_KEY\"]=\"API_KEY\";AUTH_MODE[\"AMAZON_COGNITO_USER_POOLS\"]=\"AMAZON_COGNITO_USER_POOLS\";AUTH_MODE[\"OPENID_CONNECT\"]=\"OPENID_CONNECT\";AUTH_MODE[\"AWS_IAM\"]=\"AWS_IAM\";})(AUTH_MODE||(AUTH_MODE={}));export var AuthModal=/*#__PURE__*/function(_Component){_inherits(AuthModal,_Component);var _super=_createSuper(AuthModal);function AuthModal(props){var _this;_classCallCheck(this,AuthModal);_this=_super.call(this,props);_this.state={currentCognitoToken:'',currentOIDCTokenDecoded:'',currentOIDCToken:'',userName:'',issuer:'',userGroups:[],apiKey:'',possibleGroups:[],email:'',supportedAuthModes:[AUTH_MODE.API_KEY],isOpen:true,currentAuthMode:AUTH_MODE.API_KEY,oidcTokenError:''};_this.onAdditionalFieldChange=function(ev,data){_this.setState({additionalFields:data.value});};var decodedToken=_this.parseJWTToken(_this.props.currentCognitoToken)||{};var state={userName:decodedToken['cognito:username']||'',userGroups:decodedToken['cognito:groups']||[],issuer:decodedToken['iss'],email:decodedToken['email'],possibleGroups:decodedToken['cognito:groups']||[]};var jwtFieldsToFilter=['cognito:username','cognito:groups','iss','email','sub','aud','exp','event_id','iat','algorithm','auth_time'];var additionalFields=Object.keys(decodedToken).filter(function(k){return!jwtFieldsToFilter.includes(k);}).reduce(function(acc,k){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},k,decodedToken[k]));},{});_this.state=_objectSpread(_objectSpread(_objectSpread({},_this.state),state),{},{additionalFields:JSON.stringify(additionalFields,null,4),currentCognitoToken:_this.props.currentCognitoToken||'',currentOIDCToken:_this.props.currentOIDCToken||'',currentOIDCTokenDecoded:JSON.stringify(_this.parseJWTToken(_this.props.currentOIDCToken),null,4)||'',apiKey:props.apiKey||'',supportedAuthModes:_this.props.authModes,currentAuthMode:props.selectedAuthMode});_this.onClose=_this.onClose.bind(_assertThisInitialized(_this));_this.onGroupChange=_this.onGroupChange.bind(_assertThisInitialized(_this));_this.onGroupAdd=_this.onGroupAdd.bind(_assertThisInitialized(_this));_this.onGenerate=_this.onGenerate.bind(_assertThisInitialized(_this));_this.changeAPIKey=_this.changeAPIKey.bind(_assertThisInitialized(_this));_this.changeEmail=_this.changeEmail.bind(_assertThisInitialized(_this));_this.onUserNameChange=_this.onUserNameChange.bind(_assertThisInitialized(_this));_this.onOIDCTokenChange=_this.onOIDCTokenChange.bind(_assertThisInitialized(_this));_this.onAuthModeChange=_this.onAuthModeChange.bind(_assertThisInitialized(_this));return _this;}_createClass(AuthModal,[{key:\"onClose\",value:function onClose(){var result={authMode:this.state.currentAuthMode,apiKey:this.state.currentAuthMode===AUTH_MODE.API_KEY?this.state.apiKey:null,cognitoToken:this.state.currentAuthMode===AUTH_MODE.AMAZON_COGNITO_USER_POOLS?this.state.currentCognitoToken:null,OIDCToken:this.state.currentAuthMode===AUTH_MODE.OPENID_CONNECT?this.state.currentOIDCToken:null,// We have no data for IAM to store, so we just store a constant string for now\niam:this.state.currentAuthMode===AUTH_MODE.AWS_IAM?'AWS4-HMAC-SHA256 IAMAuthorized':null};if(this.props.onClose){this.props.onClose(result);}}},{key:\"onGroupChange\",value:function onGroupChange(ev,data){this.setState({userGroups:data.value});}},{key:\"onGroupAdd\",value:function onGroupAdd(ev,data){this.setState({possibleGroups:[].concat(_toConsumableArray(this.state.possibleGroups),[data.value])});}},{key:\"onUserNameChange\",value:function onUserNameChange(ev,data){this.setState({userName:data.value});}},{key:\"onOIDCTokenChange\",value:function onOIDCTokenChange(ev,data){this.setState({currentOIDCTokenDecoded:data.value});}},{key:\"onAuthModeChange\",value:function onAuthModeChange(ev,data){this.setState({currentAuthMode:data.value});}},{key:\"changeEmail\",value:function changeEmail(ev,data){this.setState({email:data.value});}},{key:\"changeAPIKey\",value:function changeAPIKey(ev,data){this.setState({apiKey:data.value});}},{key:\"render\",value:function render(){var formContent;var actionText='Save';if(this.state.currentAuthMode===AUTH_MODE.API_KEY){formContent=/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"ApiKey\"}),/*#__PURE__*/_jsx(Input,{readOnly:true,placeholder:\"APIKey\",value:this.state.apiKey,onChange:this.changeAPIKey})]})});}else if(this.state.currentAuthMode===AUTH_MODE.AMAZON_COGNITO_USER_POOLS){actionText='Generate Token';formContent=/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Username\"}),/*#__PURE__*/_jsx(Input,{placeholder:\"User Name\",value:this.state.userName,onChange:this.onUserNameChange})]}),/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Groups\"}),/*#__PURE__*/_jsx(Dropdown,{placeholder:\"Choose cognito user groups\",search:true,options:this.state.possibleGroups.map(function(g){return{key:g,value:g,text:g};}),selection:true,fluid:true,multiple:true,allowAdditions:true,value:this.state.userGroups,onAddItem:this.onGroupAdd,onChange:this.onGroupChange})]}),/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Email\"}),/*#__PURE__*/_jsx(Input,{placeholder:\"Email\",value:this.state.email,onChange:this.changeEmail})]}),/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Additional Fields\"}),/*#__PURE__*/_jsx(TextArea,{onChange:this.onAdditionalFieldChange,rows:10,placeholder:\"Decoded OIDC Token\",spellCheck:\"false\",value:this.state.additionalFields})]})]});}else if(this.state.currentAuthMode===AUTH_MODE.OPENID_CONNECT){var errorLabel=this.state.oidcTokenError?/*#__PURE__*/_jsx(Label,{basic:true,color:\"red\",pointing:\"below\",children:this.state.oidcTokenError}):null;formContent=/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Decoded OpenID Connect Token\"}),errorLabel,/*#__PURE__*/_jsx(TextArea,{onChange:this.onOIDCTokenChange,rows:10,placeholder:\"Decoded OIDC Token\",spellCheck:\"false\",value:this.state.currentOIDCTokenDecoded})]})});}else if(this.state.currentAuthMode===AUTH_MODE.AWS_IAM){formContent=/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"label\",{children:\"IAM authentication mode has no settings.\"})});}var authModeOptions=this.state.supportedAuthModes.filter(function(mode){return mode;}).map(function(mode){return{key:mode,value:mode,text:mode};});return/*#__PURE__*/_jsxs(Modal,{onClose:this.onClose,onActionClick:this.onGenerate,open:this.state.isOpen,children:[/*#__PURE__*/_jsx(Modal.Header,{children:\"Auth Options\"}),/*#__PURE__*/_jsx(Modal.Content,{children:/*#__PURE__*/_jsxs(Modal.Description,{children:[/*#__PURE__*/_jsx(Dropdown,{placeholder:\"Auth Mode\",selection:true,options:authModeOptions,value:this.state.currentAuthMode,onChange:this.onAuthModeChange}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'1em'},children:/*#__PURE__*/_jsx(Form,{children:formContent})})]})}),/*#__PURE__*/_jsx(Modal.Actions,{children:/*#__PURE__*/_jsx(Button,{primary:true,onClick:this.onGenerate,children:actionText})})]});}},{key:\"onGenerate\",value:function onGenerate(){var _this2=this;try{var newState={isOpen:false};if(this.state.currentAuthMode===AUTH_MODE.AMAZON_COGNITO_USER_POOLS){newState['currentCognitoToken']=this.generateCognitoJWTToken();}else if(this.state.currentAuthMode===AUTH_MODE.OPENID_CONNECT){newState['currentOIDCToken']=this.generateOIDCJWTToken();}this.setState(newState,function(){_this2.onClose();});}catch(e){}}},{key:\"generateCognitoJWTToken\",value:function generateCognitoJWTToken(){var additionalFields;try{var _this$state$additiona;additionalFields=JSON.parse(((_this$state$additiona=this.state.additionalFields)===null||_this$state$additiona===void 0?void 0:_this$state$additiona.trim())||'{}');}catch(e){additionalFields={};}var tokenPayload=_objectSpread({sub:'7d8ca528-4931-4254-9273-ea5ee853f271','cognito:groups':[],email_verified:true,algorithm:'HS256',iss:'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_fake_idp',phone_number_verified:true,'cognito:username':'','cognito:roles':[],aud:'2hifa096b3a24mvm3phskuaqi3',event_id:'18f4067e-9985-4eae-9f33-f45f495470d0',token_use:'id',phone_number:'+12062062016',exp:Math.floor(Date.now()/1000)+60*60*12,email:this.state.email},additionalFields);tokenPayload['cognito:username']=this.state.userName;tokenPayload['cognito:groups']=this.state.userGroups;tokenPayload['auth_time']=Math.floor(Date.now()/1000);// In seconds\nvar token=generateToken(tokenPayload);return token;}},{key:\"generateOIDCJWTToken\",value:function generateOIDCJWTToken(){var tokenPayload=this.state.currentOIDCTokenDecoded||'';try{return generateToken(tokenPayload);}catch(e){this.setState({oidcTokenError:e.message});throw e;}}},{key:\"parseJWTToken\",value:function parseJWTToken(token){return parse(token);}}]);return AuthModal;}(Component);","map":{"version":3,"sources":["/home/katesclau/returnmates/amplify-appsync-simulator/amplify-graphiql-explorer/src/AuthModal.tsx"],"names":["React","Component","Button","Form","Modal","Dropdown","Input","TextArea","Label","generateToken","parse","AUTH_MODE","AuthModal","props","state","currentCognitoToken","currentOIDCTokenDecoded","currentOIDCToken","userName","issuer","userGroups","apiKey","possibleGroups","email","supportedAuthModes","API_KEY","isOpen","currentAuthMode","oidcTokenError","onAdditionalFieldChange","ev","data","setState","additionalFields","value","decodedToken","parseJWTToken","jwtFieldsToFilter","Object","keys","filter","k","includes","reduce","acc","JSON","stringify","authModes","selectedAuthMode","onClose","bind","onGroupChange","onGroupAdd","onGenerate","changeAPIKey","changeEmail","onUserNameChange","onOIDCTokenChange","onAuthModeChange","result","authMode","cognitoToken","AMAZON_COGNITO_USER_POOLS","OIDCToken","OPENID_CONNECT","iam","AWS_IAM","formContent","actionText","map","g","key","text","errorLabel","authModeOptions","mode","marginTop","newState","generateCognitoJWTToken","generateOIDCJWTToken","e","trim","tokenPayload","sub","email_verified","algorithm","iss","phone_number_verified","aud","event_id","token_use","phone_number","exp","Math","floor","Date","now","token","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, Modal, Dropdown, Input, TextArea, Label } from 'semantic-ui-react';\nimport { generateToken, parse } from './utils/jwt';\n\nexport enum AUTH_MODE {\n  API_KEY = 'API_KEY',\n  AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS',\n  OPENID_CONNECT = 'OPENID_CONNECT',\n  AWS_IAM = 'AWS_IAM',\n}\n\ntype State = {\n  currentCognitoToken?: string;\n  currentOIDCToken: string;\n  currentOIDCTokenDecoded?: string;\n  currentAuthMode: AUTH_MODE;\n  userName?: string;\n  userGroups: string[];\n  email?: string;\n  additionalFields?: string;\n  issuer?: string;\n  apiKey?: string;\n  possibleGroups: string[];\n  isOpen: boolean;\n  supportedAuthModes: AUTH_MODE[];\n  oidcTokenError: string;\n};\n\ntype Props = {\n  onClose: Function;\n  authModes: AUTH_MODE[];\n  selectedAuthMode: AUTH_MODE;\n  currentCognitoToken?: string;\n  currentOIDCToken?: string;\n  apiKey?: string;\n};\nexport class AuthModal extends Component<Props, State> {\n  state: State = {\n    currentCognitoToken: '',\n    currentOIDCTokenDecoded: '',\n    currentOIDCToken: '',\n    userName: '',\n    issuer: '',\n    userGroups: [],\n    apiKey: '',\n    possibleGroups: [],\n    email: '',\n    supportedAuthModes: [AUTH_MODE.API_KEY],\n    isOpen: true,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    oidcTokenError: '',\n  };\n\n  constructor(props) {\n    super(props);\n\n    const decodedToken = this.parseJWTToken(this.props.currentCognitoToken) || {};\n    let state = {\n      userName: decodedToken['cognito:username'] || '',\n      userGroups: decodedToken['cognito:groups'] || [],\n      issuer: decodedToken['iss'],\n      email: decodedToken['email'],\n      possibleGroups: decodedToken['cognito:groups'] || [],\n    };\n\n    const jwtFieldsToFilter = [\n      'cognito:username',\n      'cognito:groups',\n      'iss',\n      'email',\n      'sub',\n      'aud',\n      'exp',\n      'event_id',\n      'iat',\n      'algorithm',\n      'auth_time',\n    ];\n    const additionalFields = Object.keys(decodedToken)\n      .filter(k => !jwtFieldsToFilter.includes(k))\n      .reduce((acc, k) => ({ ...acc, [k]: decodedToken[k] }), {});\n\n    this.state = {\n      ...this.state,\n      ...state,\n      additionalFields: JSON.stringify(additionalFields, null, 4),\n      currentCognitoToken: this.props.currentCognitoToken || '',\n      currentOIDCToken: this.props.currentOIDCToken || '',\n      currentOIDCTokenDecoded: JSON.stringify(this.parseJWTToken(this.props.currentOIDCToken), null, 4) || '',\n      apiKey: props.apiKey || '',\n      supportedAuthModes: this.props.authModes,\n      currentAuthMode: props.selectedAuthMode,\n    };\n\n    this.onClose = this.onClose.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n    this.onGroupAdd = this.onGroupAdd.bind(this);\n    this.onGenerate = this.onGenerate.bind(this);\n    this.changeAPIKey = this.changeAPIKey.bind(this);\n    this.changeEmail = this.changeEmail.bind(this);\n    this.onUserNameChange = this.onUserNameChange.bind(this);\n    this.onOIDCTokenChange = this.onOIDCTokenChange.bind(this);\n    this.onAuthModeChange = this.onAuthModeChange.bind(this);\n  }\n\n  onClose() {\n    const result = {\n      authMode: this.state.currentAuthMode,\n      apiKey: this.state.currentAuthMode === AUTH_MODE.API_KEY ? this.state.apiKey : null,\n      cognitoToken: this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? this.state.currentCognitoToken : null,\n      OIDCToken: this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT ? this.state.currentOIDCToken : null,\n      // We have no data for IAM to store, so we just store a constant string for now\n      iam: this.state.currentAuthMode === AUTH_MODE.AWS_IAM ? 'AWS4-HMAC-SHA256 IAMAuthorized' : null,\n    };\n\n    if (this.props.onClose) {\n      this.props.onClose(result);\n    }\n  }\n  onGroupChange(ev, data) {\n    this.setState({\n      userGroups: data.value,\n    });\n  }\n  onGroupAdd(ev, data) {\n    this.setState({\n      possibleGroups: [...this.state.possibleGroups, data.value],\n    });\n  }\n\n  onUserNameChange(ev, data) {\n    this.setState({\n      userName: data.value,\n    });\n  }\n\n  onOIDCTokenChange(ev, data) {\n    this.setState({\n      currentOIDCTokenDecoded: data.value,\n    });\n  }\n\n  onAuthModeChange(ev, data) {\n    this.setState({\n      currentAuthMode: data.value,\n    });\n  }\n\n  changeEmail(ev, data) {\n    this.setState({\n      email: data.value,\n    });\n  }\n\n  onAdditionalFieldChange = (ev, data) => {\n    this.setState({\n      additionalFields: data.value,\n    });\n  };\n\n  changeAPIKey(ev, data) {\n    this.setState({\n      apiKey: data.value,\n    });\n  }\n\n  render() {\n    let formContent;\n    let actionText = 'Save';\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      formContent = (\n        <>\n          <Form.Field>\n            <label>ApiKey</label>\n            <Input readOnly placeholder='APIKey' value={this.state.apiKey} onChange={this.changeAPIKey} />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      actionText = 'Generate Token';\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Username</label>\n            <Input placeholder='User Name' value={this.state.userName} onChange={this.onUserNameChange} />\n          </Form.Field>\n          <Form.Field>\n            <label>Groups</label>\n            <Dropdown\n              placeholder='Choose cognito user groups'\n              search\n              options={this.state.possibleGroups.map(g => ({\n                key: g,\n                value: g,\n                text: g,\n              }))}\n              selection\n              fluid\n              multiple\n              allowAdditions\n              value={this.state.userGroups}\n              onAddItem={this.onGroupAdd}\n              onChange={this.onGroupChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Email</label>\n            <Input placeholder='Email' value={this.state.email} onChange={this.changeEmail} />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Additional Fields</label>\n            <TextArea\n              onChange={this.onAdditionalFieldChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck='false'\n              value={this.state.additionalFields}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      const errorLabel = this.state.oidcTokenError ? (\n        <Label basic color='red' pointing='below'>\n          {this.state.oidcTokenError}\n        </Label>\n      ) : null;\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Decoded OpenID Connect Token</label>\n            {errorLabel}\n            <TextArea\n              onChange={this.onOIDCTokenChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck='false'\n              value={this.state.currentOIDCTokenDecoded}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AWS_IAM) {\n      formContent = (\n        <>\n          <label>IAM authentication mode has no settings.</label>\n        </>\n      );\n    }\n\n    const authModeOptions = this.state.supportedAuthModes\n      .filter(mode => mode)\n      .map(mode => ({\n        key: mode,\n        value: mode,\n        text: mode,\n      }));\n\n    return (\n      <Modal onClose={this.onClose} onActionClick={this.onGenerate} open={this.state.isOpen}>\n        <Modal.Header>Auth Options</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Dropdown\n              placeholder='Auth Mode'\n              selection\n              options={authModeOptions}\n              value={this.state.currentAuthMode}\n              onChange={this.onAuthModeChange}\n            />\n            <div style={{ marginTop: '1em' }}>\n              <Form>{formContent}</Form>\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button primary onClick={this.onGenerate}>\n            {actionText}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n  onGenerate() {\n    try {\n      const newState = {\n        isOpen: false,\n      };\n      if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n        newState['currentCognitoToken'] = this.generateCognitoJWTToken();\n      } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n        newState['currentOIDCToken'] = this.generateOIDCJWTToken();\n      }\n      this.setState(newState, () => {\n        this.onClose();\n      });\n    } catch (e) {}\n  }\n\n  generateCognitoJWTToken() {\n    let additionalFields;\n    try {\n      additionalFields = JSON.parse(this.state.additionalFields?.trim() || '{}');\n    } catch (e) {\n      additionalFields = {};\n    }\n    const tokenPayload: any = {\n      sub: '7d8ca528-4931-4254-9273-ea5ee853f271',\n      'cognito:groups': [],\n      email_verified: true,\n      algorithm: 'HS256',\n      iss: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_fake_idp',\n      phone_number_verified: true,\n      'cognito:username': '',\n      'cognito:roles': [],\n      aud: '2hifa096b3a24mvm3phskuaqi3',\n      event_id: '18f4067e-9985-4eae-9f33-f45f495470d0',\n      token_use: 'id',\n      phone_number: '+12062062016',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 12,\n      email: this.state.email,\n      ...additionalFields,\n    };\n    tokenPayload['cognito:username'] = this.state.userName;\n    tokenPayload['cognito:groups'] = this.state.userGroups;\n    tokenPayload['auth_time'] = Math.floor(Date.now() / 1000); // In seconds\n\n    const token = generateToken(tokenPayload);\n    return token;\n  }\n\n  generateOIDCJWTToken() {\n    const tokenPayload = this.state.currentOIDCTokenDecoded || '';\n    try {\n      return generateToken(tokenPayload);\n    } catch (e: any) {\n      this.setState({\n        oidcTokenError: e.message,\n      });\n      throw e;\n    }\n  }\n  parseJWTToken(token) {\n    return parse(token);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}