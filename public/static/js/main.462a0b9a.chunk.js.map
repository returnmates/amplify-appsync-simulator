{"version":3,"sources":["utils/jwt.ts","AuthModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateToken","decodedToken","JSON","parse","token","sign","verify","e","Error","message","decode","refreshToken","issuer","tokenObj","Object","keys","length","iss","exp","Math","floor","Date","now","stringify","AUTH_MODE","AuthModal","props","state","currentCognitoToken","currentOIDCTokenDecoded","currentOIDCToken","userName","userGroups","apiKey","possibleGroups","email","supportedAuthModes","API_KEY","isOpen","currentAuthMode","oidcTokenError","onAdditionalFieldChange","ev","data","setState","additionalFields","value","parseJWTToken","jwtFieldsToFilter","filter","k","includes","reduce","acc","authModes","selectedAuthMode","onClose","bind","onGroupChange","onGroupAdd","onGenerate","changeAPIKey","changeEmail","onUserNameChange","onOIDCTokenChange","onAuthModeChange","result","authMode","this","cognitoToken","AMAZON_COGNITO_USER_POOLS","OIDCToken","OPENID_CONNECT","iam","AWS_IAM","formContent","actionText","Form","Field","Input","readOnly","placeholder","onChange","Dropdown","search","options","map","g","key","text","selection","fluid","multiple","allowAdditions","onAddItem","TextArea","rows","spellCheck","errorLabel","Label","basic","color","pointing","authModeOptions","mode","Modal","onActionClick","open","Header","Content","Description","style","marginTop","Actions","Button","primary","onClick","newState","generateCognitoJWTToken","generateOIDCJWTToken","trim","tokenPayload","sub","email_verified","algorithm","phone_number_verified","aud","event_id","token_use","phone_number","Component","DEFAULT_COGNITO_JWT_TOKEN","DEFAULT_OIDC_JWT_TOKEN","AUTH_TYPE_TO_NAME","DEFAULT_API_INFO","name","defaultAuthenticationType","authenticationType","additionalAuthenticationProviders","LOCAL_STORAGE_KEY_NAMES","fetcher","params","additionalHeaders","headers","Accept","fetch","method","body","then","response","json","responseBody","App","_graphiql","schema","query","explorerIsOpen","authModalVisible","apiInfo","credentials","cognitoJWTToken","oidcJWTToken","toggleAuthModal","prevState","switchAuthMode","val","_handleInspectOperation","cm","mousePos","parsedQuery","console","error","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operationKind","kind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","_handleToggleExplorer","a","loadCredentials","getIntrospectionQuery","introspectionResult","editor","getQueryEditor","setOption","extraKeys","buildClientSchema","window","localStorage","setItem","IAM","authProviders","possibleAuth","auth","getItem","warn","issuers","openIDConnectConfig","Issuer","authModal","storeCredentials","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","handlePrettifyQuery","label","title","handleToggleHistory","Menu","MenuItem","onSelect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.462a0b9a.chunk.js","sourcesContent":["import { decode, sign, verify } from 'jsonwebtoken';\n\nexport function generateToken(decodedToken: string | object): string {\n  try {\n    if (typeof decodedToken === 'string') {\n      decodedToken = JSON.parse(decodedToken);\n    }\n    const token = sign(decodedToken, 'open-secrete');\n    verify(token, 'open-secrete');\n    return token;\n  } catch (e: any) {\n    const err = new Error('Error when generating OIDC token: ' + e.message);\n    throw err;\n  }\n}\n\nexport function parse(token): object {\n  const decodedToken = decode(token);\n  return decodedToken;\n}\n\n/**\n * Updates the exp time of the static token to ensure the shipped token is fresh. If user passes an\n * issuer, updates the token with the issuer\n * @param token\n * @param issuer\n */\nexport function refreshToken(token: string, issuer?: string): string {\n  const tokenObj: any = parse(token);\n  if (!Object.keys(tokenObj).length) {\n    throw new Error(`Invalid token ${token}`);\n  }\n  if (issuer) {\n    tokenObj.iss = issuer;\n  }\n  tokenObj.exp = Math.floor(Date.now() / 100 + 20000);\n  return generateToken(JSON.stringify(tokenObj));\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Modal, Dropdown, Input, TextArea, Label } from 'semantic-ui-react';\nimport { generateToken, parse } from './utils/jwt';\n\nexport enum AUTH_MODE {\n  API_KEY = 'API_KEY',\n  AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS',\n  OPENID_CONNECT = 'OPENID_CONNECT',\n  AWS_IAM = 'AWS_IAM',\n}\n\ntype State = {\n  currentCognitoToken?: string;\n  currentOIDCToken: string;\n  currentOIDCTokenDecoded?: string;\n  currentAuthMode: AUTH_MODE;\n  userName?: string;\n  userGroups: string[];\n  email?: string;\n  additionalFields?: string;\n  issuer?: string;\n  apiKey?: string;\n  possibleGroups: string[];\n  isOpen: boolean;\n  supportedAuthModes: AUTH_MODE[];\n  oidcTokenError: string;\n};\n\ntype Props = {\n  onClose: Function;\n  authModes: AUTH_MODE[];\n  selectedAuthMode: AUTH_MODE;\n  currentCognitoToken?: string;\n  currentOIDCToken?: string;\n  apiKey?: string;\n};\nexport class AuthModal extends Component<Props, State> {\n  state: State = {\n    currentCognitoToken: '',\n    currentOIDCTokenDecoded: '',\n    currentOIDCToken: '',\n    userName: '',\n    issuer: '',\n    userGroups: [],\n    apiKey: '',\n    possibleGroups: [],\n    email: '',\n    supportedAuthModes: [AUTH_MODE.API_KEY],\n    isOpen: true,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    oidcTokenError: '',\n  };\n\n  constructor(props) {\n    super(props);\n\n    const decodedToken = this.parseJWTToken(this.props.currentCognitoToken) || {};\n    let state = {\n      userName: decodedToken['cognito:username'] || '',\n      userGroups: decodedToken['cognito:groups'] || [],\n      issuer: decodedToken['iss'],\n      email: decodedToken['email'],\n      possibleGroups: decodedToken['cognito:groups'] || [],\n    };\n\n    const jwtFieldsToFilter = [\n      'cognito:username',\n      'cognito:groups',\n      'iss',\n      'email',\n      'sub',\n      'aud',\n      'exp',\n      'event_id',\n      'iat',\n      'algorithm',\n      'auth_time',\n    ];\n    const additionalFields = Object.keys(decodedToken)\n      .filter(k => !jwtFieldsToFilter.includes(k))\n      .reduce((acc, k) => ({ ...acc, [k]: decodedToken[k] }), {});\n\n    this.state = {\n      ...this.state,\n      ...state,\n      additionalFields: JSON.stringify(additionalFields, null, 4),\n      currentCognitoToken: this.props.currentCognitoToken || '',\n      currentOIDCToken: this.props.currentOIDCToken || '',\n      currentOIDCTokenDecoded: JSON.stringify(this.parseJWTToken(this.props.currentOIDCToken), null, 4) || '',\n      apiKey: props.apiKey || '',\n      supportedAuthModes: this.props.authModes,\n      currentAuthMode: props.selectedAuthMode,\n    };\n\n    this.onClose = this.onClose.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n    this.onGroupAdd = this.onGroupAdd.bind(this);\n    this.onGenerate = this.onGenerate.bind(this);\n    this.changeAPIKey = this.changeAPIKey.bind(this);\n    this.changeEmail = this.changeEmail.bind(this);\n    this.onUserNameChange = this.onUserNameChange.bind(this);\n    this.onOIDCTokenChange = this.onOIDCTokenChange.bind(this);\n    this.onAuthModeChange = this.onAuthModeChange.bind(this);\n  }\n\n  onClose() {\n    const result = {\n      authMode: this.state.currentAuthMode,\n      apiKey: this.state.currentAuthMode === AUTH_MODE.API_KEY ? this.state.apiKey : null,\n      cognitoToken: this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? this.state.currentCognitoToken : null,\n      OIDCToken: this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT ? this.state.currentOIDCToken : null,\n      // We have no data for IAM to store, so we just store a constant string for now\n      iam: this.state.currentAuthMode === AUTH_MODE.AWS_IAM ? 'AWS4-HMAC-SHA256 IAMAuthorized' : null,\n    };\n\n    if (this.props.onClose) {\n      this.props.onClose(result);\n    }\n  }\n  onGroupChange(ev, data) {\n    this.setState({\n      userGroups: data.value,\n    });\n  }\n  onGroupAdd(ev, data) {\n    this.setState({\n      possibleGroups: [...this.state.possibleGroups, data.value],\n    });\n  }\n\n  onUserNameChange(ev, data) {\n    this.setState({\n      userName: data.value,\n    });\n  }\n\n  onOIDCTokenChange(ev, data) {\n    this.setState({\n      currentOIDCTokenDecoded: data.value,\n    });\n  }\n\n  onAuthModeChange(ev, data) {\n    this.setState({\n      currentAuthMode: data.value,\n    });\n  }\n\n  changeEmail(ev, data) {\n    this.setState({\n      email: data.value,\n    });\n  }\n\n  onAdditionalFieldChange = (ev, data) => {\n    this.setState({\n      additionalFields: data.value,\n    });\n  };\n\n  changeAPIKey(ev, data) {\n    this.setState({\n      apiKey: data.value,\n    });\n  }\n\n  render() {\n    let formContent;\n    let actionText = 'Save';\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      formContent = (\n        <>\n          <Form.Field>\n            <label>ApiKey</label>\n            <Input readOnly placeholder='APIKey' value={this.state.apiKey} onChange={this.changeAPIKey} />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      actionText = 'Generate Token';\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Username</label>\n            <Input placeholder='User Name' value={this.state.userName} onChange={this.onUserNameChange} />\n          </Form.Field>\n          <Form.Field>\n            <label>Groups</label>\n            <Dropdown\n              placeholder='Choose cognito user groups'\n              search\n              options={this.state.possibleGroups.map(g => ({\n                key: g,\n                value: g,\n                text: g,\n              }))}\n              selection\n              fluid\n              multiple\n              allowAdditions\n              value={this.state.userGroups}\n              onAddItem={this.onGroupAdd}\n              onChange={this.onGroupChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Email</label>\n            <Input placeholder='Email' value={this.state.email} onChange={this.changeEmail} />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Additional Fields</label>\n            <TextArea\n              onChange={this.onAdditionalFieldChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck='false'\n              value={this.state.additionalFields}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      const errorLabel = this.state.oidcTokenError ? (\n        <Label basic color='red' pointing='below'>\n          {this.state.oidcTokenError}\n        </Label>\n      ) : null;\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Decoded OpenID Connect Token</label>\n            {errorLabel}\n            <TextArea\n              onChange={this.onOIDCTokenChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck='false'\n              value={this.state.currentOIDCTokenDecoded}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AWS_IAM) {\n      formContent = (\n        <>\n          <label>IAM authentication mode has no settings.</label>\n        </>\n      );\n    }\n\n    const authModeOptions = this.state.supportedAuthModes\n      .filter(mode => mode)\n      .map(mode => ({\n        key: mode,\n        value: mode,\n        text: mode,\n      }));\n\n    return (\n      <Modal onClose={this.onClose} onActionClick={this.onGenerate} open={this.state.isOpen}>\n        <Modal.Header>Auth Options</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Dropdown\n              placeholder='Auth Mode'\n              selection\n              options={authModeOptions}\n              value={this.state.currentAuthMode}\n              onChange={this.onAuthModeChange}\n            />\n            <div style={{ marginTop: '1em' }}>\n              <Form>{formContent}</Form>\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button primary onClick={this.onGenerate}>\n            {actionText}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n  onGenerate() {\n    try {\n      const newState = {\n        isOpen: false,\n      };\n      if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n        newState['currentCognitoToken'] = this.generateCognitoJWTToken();\n      } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n        newState['currentOIDCToken'] = this.generateOIDCJWTToken();\n      }\n      this.setState(newState, () => {\n        this.onClose();\n      });\n    } catch (e) {}\n  }\n\n  generateCognitoJWTToken() {\n    let additionalFields;\n    try {\n      additionalFields = JSON.parse(this.state.additionalFields?.trim() || '{}');\n    } catch (e) {\n      additionalFields = {};\n    }\n    const tokenPayload: any = {\n      sub: '7d8ca528-4931-4254-9273-ea5ee853f271',\n      'cognito:groups': [],\n      email_verified: true,\n      algorithm: 'HS256',\n      iss: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_fake_idp',\n      phone_number_verified: true,\n      'cognito:username': '',\n      'cognito:roles': [],\n      aud: '2hifa096b3a24mvm3phskuaqi3',\n      event_id: '18f4067e-9985-4eae-9f33-f45f495470d0',\n      token_use: 'id',\n      phone_number: '+12062062016',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 12,\n      email: this.state.email,\n      ...additionalFields,\n    };\n    tokenPayload['cognito:username'] = this.state.userName;\n    tokenPayload['cognito:groups'] = this.state.userGroups;\n    tokenPayload['auth_time'] = Math.floor(Date.now() / 1000); // In seconds\n\n    const token = generateToken(tokenPayload);\n    return token;\n  }\n\n  generateOIDCJWTToken() {\n    const tokenPayload = this.state.currentOIDCTokenDecoded || '';\n    try {\n      return generateToken(tokenPayload);\n    } catch (e: any) {\n      this.setState({\n        oidcTokenError: e.message,\n      });\n      throw e;\n    }\n  }\n  parseJWTToken(token) {\n    return parse(token);\n  }\n}\n","import GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport 'graphiql/graphiql.css';\nimport { buildClientSchema, getIntrospectionQuery, GraphQLSchema, parse } from 'graphql';\nimport React, { Component } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { AuthModal, AUTH_MODE } from './AuthModal';\nimport { refreshToken } from './utils/jwt';\n\nconst DEFAULT_COGNITO_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3ZDhjYTUyOC00OTMxLTQyNTQtOTI3My1lYTVlZTg1M2YyNzEiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfZmFrZSIsInBob25lX251bWJlcl92ZXJpZmllZCI6dHJ1ZSwiY29nbml0bzp1c2VybmFtZSI6InVzZXIxIiwiYXVkIjoiMmhpZmEwOTZiM2EyNG12bTNwaHNrdWFxaTMiLCJldmVudF9pZCI6ImIxMmEzZTJmLTdhMzYtNDkzYy04NWIzLTIwZDgxOGJkNzhhMSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxOTc0MjY0NDEyLCJwaG9uZV9udW1iZXIiOiIrMTIwNjIwNjIwMTYiLCJleHAiOjE1NjQyNjgwMTIsImlhdCI6MTU2NDI2NDQxMywiZW1haWwiOiJ1c2VyQGRvbWFpbi5jb20ifQ.wHKY2KIhvWn4zpJ4TZ1vS3zRE9mGWsLY4NCV2Cof17Q`;\nconst DEFAULT_OIDC_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczovL3NvbWUtb2lkYy1wcm92aWRlci9hdXRoIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjp0cnVlLCJhdWQiOiIyaGlmYTA5NmIzYTI0bXZtM3Boc2t1YXFpMyIsImV2ZW50X2lkIjoiYjEyYTNlMmYtN2EzNi00OTNjLTg1YjMtMjBkODE4YmQ3OGExIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE5NzQyNjQ0MTIsInBob25lX251bWJlciI6IisxMjA2MjA2MjAxNiIsImV4cCI6MTU2NDI2ODAxMiwiaWF0IjoxNTY0MjY0NDEzLCJlbWFpbCI6InVzZXJAZG9tYWluLmNvbSJ9.uAegFXomOnA7Dkl-5FcS5icu5kL9Juqb81GnTrOZZqM`;\n\nconst AUTH_TYPE_TO_NAME = {\n  AMAZON_COGNITO_USER_POOLS: 'User Pool',\n  API_KEY: 'API Key',\n  OPENID_CONNECT: 'Open ID',\n  AWS_IAM: 'IAM',\n};\n\ntype AmplifyAppSyncSimulatorAuthInfo = {\n  authenticationType: string;\n};\ntype AmplifyAppSyncSimulatorApiInfo = {\n  name: string;\n  defaultAuthenticationType: AmplifyAppSyncSimulatorAuthInfo;\n  apiKey: string;\n  additionalAuthenticationProviders: AmplifyAppSyncSimulatorAuthInfo[];\n};\nconst DEFAULT_API_INFO: AmplifyAppSyncSimulatorApiInfo = {\n  name: 'AppSyncTransformer',\n  defaultAuthenticationType: {\n    authenticationType: 'API_KEY',\n  },\n  additionalAuthenticationProviders: [],\n  apiKey: 'da2-fakeApiId123456',\n};\n\nconst LOCAL_STORAGE_KEY_NAMES = {\n  cognitoToken: 'AMPLIFY_GRPAHIQL_EXPLORER_COGNITO_JWT_TOKEN',\n  oidcToken: 'AMPLIFY_GRPAHIQL_EXPLORER_OIDC_JWT_TOKEN',\n  apiKey: 'AMPLIFY_GRPAHIQL_EXPLORER_API_KEY',\n  iam: 'AMPLIFY_GRPAHIQL_EXPLORER_AWS_IAM',\n};\n\nfunction getAPIInfo() {\n  return fetch('/api-config').then(response => response.json());\n}\n\nfunction fetcher(params: Object, additionalHeaders): Promise<any> {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ...additionalHeaders,\n  };\n  return fetch('/graphql', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(params),\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (responseBody) {\n      try {\n        return JSON.parse(responseBody);\n      } catch (e) {\n        return responseBody;\n      }\n    });\n}\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\n`;\n\ntype State = {\n  schema?: GraphQLSchema | null;\n  query?: string;\n  explorerIsOpen: boolean;\n  authModalVisible: boolean;\n  jwtToken?: string;\n  apiKey?: string;\n  apiInfo: AmplifyAppSyncSimulatorApiInfo;\n  currentAuthMode: AUTH_MODE;\n  credentials: {\n    apiKey?: string;\n    cognitoJWTToken?: string;\n    oidcJWTToken?: string;\n    iam?: string;\n  };\n};\n\nclass App extends Component<{}, State> {\n  _graphiql?: GraphiQL;\n  state: State = {\n    schema: null,\n    query: DEFAULT_QUERY,\n    explorerIsOpen: true,\n    authModalVisible: false,\n    apiInfo: DEFAULT_API_INFO,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    credentials: {\n      apiKey: '',\n      cognitoJWTToken: '',\n      oidcJWTToken: '',\n      iam: '',\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.fetch = this.fetch.bind(this);\n  }\n  async componentDidMount() {\n    const apiInfo = await getAPIInfo();\n    this.loadCredentials(apiInfo);\n    this.setState({ apiInfo });\n    const introspectionResult = await this.fetch({\n      query: getIntrospectionQuery(),\n    });\n\n    const editor = this._graphiql?.getQueryEditor();\n    editor.setOption('extraKeys', {\n      ...(editor.options.extraKeys || {}),\n      'Shift-Alt-LeftClick': this._handleInspectOperation,\n    });\n    if (introspectionResult && introspectionResult.data) {\n      this.setState({ schema: buildClientSchema(introspectionResult.data) });\n    }\n  }\n\n  toggleAuthModal = () =>\n    this.setState(prevState => ({\n      authModalVisible: !prevState.authModalVisible,\n    }));\n\n  switchAuthMode = val => {\n    this.setState({ currentAuthMode: val });\n  };\n  _handleInspectOperation = (cm: any, mousePos: { line: Number; ch: Number }) => {\n    const parsedQuery = parse(this.state.query || '');\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    var token = cm.getTokenAt(mousePos);\n    var start = { line: mousePos.line, ch: token.start };\n    var end = { line: mousePos.line, ch: token.end };\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    var position = relevantMousePos;\n\n    var def = parsedQuery.definitions.find(definition => {\n      if (!definition.loc) {\n        console.log('Missing location information for definition');\n        return false;\n      }\n\n      const { start, end } = definition.loc;\n      return start <= position.start && end >= position.end;\n    });\n\n    if (!def) {\n      console.error(`Unable to find definition corresponding position at ${position.start}`);\n      return null;\n    }\n\n    var operationKind = def.kind === 'OperationDefinition' ? def.operation : def.kind === 'FragmentDefinition' ? 'fragment' : 'unknown';\n\n    var operationName =\n      def.kind === 'OperationDefinition' && !!def.name\n        ? def.name.value\n        : def.kind === 'FragmentDefinition' && !!def.name\n        ? def.name.value\n        : 'unknown';\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    var el = document.querySelector(selector);\n    el && el.scrollIntoView();\n  };\n\n  _handleEditQuery = (query: string | undefined): void => this.setState({ query });\n\n  _handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n\n  fetch(params) {\n    const headers = {};\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      headers['x-api-key'] = this.state.credentials.apiKey;\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      headers['Authorization'] = this.state.credentials.cognitoJWTToken;\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      headers['Authorization'] = this.state.credentials.oidcJWTToken;\n    } else if (this.state.currentAuthMode === AUTH_MODE.AWS_IAM) {\n      headers['Authorization'] = this.state.credentials.iam;\n    }\n    return fetcher(params, headers);\n  }\n\n  storeCredentials(credentials) {\n    const apiInfo = this.state.apiInfo;\n    const newState = {\n      apiInfo: { ...apiInfo, authenticationType: credentials.authMode },\n    };\n    if (credentials.authMode === 'API_KEY') {\n      newState['apiKey'] = credentials.apiKey;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.apiKey, credentials.apiKey);\n    } else if (credentials.authMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      newState['cognitoJWTToken'] = credentials.cognitoToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken, credentials.cognitoToken);\n    } else if (credentials.authMode === AUTH_MODE.OPENID_CONNECT) {\n      newState['oidcJWTToken'] = credentials.OIDCToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.oidcToken, credentials.OIDCToken);\n    } else if (credentials.authMode === AUTH_MODE.AWS_IAM) {\n      newState['oidcJWTToken'] = credentials.IAM;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.iam, credentials.iam);\n    }\n    this.setState(prevState => ({\n      credentials: {\n        ...prevState.credentials,\n        ...newState,\n      },\n      currentAuthMode: credentials.authMode,\n    }));\n  }\n\n  loadCredentials(apiInfo = this.state.apiInfo) {\n    const credentials = {};\n    const authProviders = [apiInfo.defaultAuthenticationType, ...apiInfo.additionalAuthenticationProviders];\n    const possibleAuth = authProviders.map(auth => auth.authenticationType);\n\n    if (possibleAuth.includes('API_KEY')) {\n      credentials['apiKey'] = DEFAULT_API_INFO.apiKey;\n    }\n\n    if (possibleAuth.includes('AMAZON_COGNITO_USER_POOLS')) {\n      try {\n        credentials['cognitoJWTToken'] = refreshToken(window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken) || '');\n      } catch (e) {\n        console.warn('Invalid Cognito token found in local storage. Using the default OIDC token');\n        // token is not valid\n        credentials['cognitoJWTToken'] = refreshToken(DEFAULT_COGNITO_JWT_TOKEN);\n      }\n    }\n\n    if (possibleAuth.includes('OPENID_CONNECT')) {\n      const issuers = authProviders\n        .filter(auth => auth.authenticationType === AUTH_MODE.OPENID_CONNECT)\n        .map((auth: any) => auth.openIDConnectConfig.Issuer);\n      try {\n        credentials['oidcJWTToken'] = refreshToken(window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.oidcToken) || '', issuers[0]);\n      } catch (e) {\n        console.warn('Invalid OIDC token found in local storage. Using the default OIDC token');\n        credentials['oidcJWTToken'] = refreshToken(DEFAULT_OIDC_JWT_TOKEN, issuers[0]);\n      }\n    }\n\n    if (possibleAuth.includes('AWS_IAM')) {\n      credentials['iam'] = 'AWS4-HMAC-SHA256 IAMAuthorized';\n    }\n\n    this.setState(() => ({\n      currentAuthMode: AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType] || AUTH_MODE.API_KEY,\n    }));\n    this.setState({ credentials });\n    return credentials;\n  }\n\n  render() {\n    const { query, schema, authModalVisible, apiInfo } = this.state;\n    const authModes = [\n      AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType],\n      ...apiInfo.additionalAuthenticationProviders.map(auth => AUTH_MODE[auth.authenticationType]),\n    ].filter(auth => auth);\n    const authModal = authModalVisible ? (\n      <AuthModal\n        selectedAuthMode={this.state.currentAuthMode}\n        currentOIDCToken={this.state.credentials.oidcJWTToken}\n        currentCognitoToken={this.state.credentials.cognitoJWTToken}\n        apiKey={this.state.credentials.apiKey}\n        authModes={authModes}\n        onClose={credentials => {\n          this.storeCredentials(credentials);\n          this.setState({ authModalVisible: false });\n        }}\n      />\n    ) : null;\n    return (\n      <>\n        {authModal}\n        <div className='graphiql-container'>\n          <GraphiQLExplorer\n            schema={schema}\n            query={query}\n            onEdit={this._handleEditQuery}\n            onRunOperation={operationName => this._graphiql?.handleRunQuery(operationName)}\n            explorerIsOpen={this.state.explorerIsOpen}\n            onToggleExplorer={this._handleToggleExplorer}\n          />\n          <GraphiQL\n            ref={ref => (this._graphiql = ref as GraphiQL)}\n            fetcher={this.fetch}\n            schema={schema!}\n            query={query}\n            onEditQuery={this._handleEditQuery}\n          >\n            <GraphiQL.Toolbar>\n              <GraphiQL.Button\n                onClick={() => this._graphiql?.handlePrettifyQuery()}\n                label='Prettify'\n                title='Prettify Query (Shift-Ctrl-P)'\n              />\n              <GraphiQL.Button onClick={() => this._graphiql?.handleToggleHistory()} label='History' title='Show History' />\n              <GraphiQL.Button onClick={this._handleToggleExplorer} label='Explorer' title='Toggle Explorer' />\n              <GraphiQL.Button onClick={this.toggleAuthModal} label='Update Auth' title='Auth Setting' />\n              <GraphiQL.Menu\n                label={`Auth - ${AUTH_TYPE_TO_NAME[this.state.currentAuthMode]} `}\n                title={AUTH_TYPE_TO_NAME[this.state.currentAuthMode]}\n              >\n                {authModes.map(mode => (\n                  <GraphiQL.MenuItem\n                    title={AUTH_TYPE_TO_NAME[mode]}\n                    label={`Use: ${AUTH_TYPE_TO_NAME[mode]}`}\n                    onSelect={() => this.switchAuthMode(mode)}\n                  />\n                ))}\n              </GraphiQL.Menu>\n            </GraphiQL.Toolbar>\n          </GraphiQL>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}